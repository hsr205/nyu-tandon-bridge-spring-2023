============================================
Name: Henry Rothenberg
NetID: hr2600

============================================
(1)

D. When it started. 

============================================
(2) 

C. A device driver (i.e. for a mouse) 

============================================
(3)

A. UDP

============================================
(4)

Fetch - Decode - Execute

============================================
(5)

Type A

============================================
(6)

Solution:

Through the 5 layers of IP (Application, Transport, Network, Link and Physical), each layer will be adding it own unique headers to the packet
that is being transmitted from the top layer (Application) to the bottom layer (Physical). Along this path, the header in the Network layer 
on the server side will attached it's header indicating what the source port was from the server.

============================================
(7)

Solution:

Since UDP is "connection-less" (meaning it does not engage in a Three-way Handshake the way TCP does), UDP will not wait for a connection to be opened
and will self determine in the Network layer header which destination port to choose on the server. In the event the port is not registered to receive traffic, UDP
will re-send it's packets (after the server responds with an ACK (acknowledgement) that it did not receive the sent packets) to a nearby port until a positive acknowledgement
is provided back to the sending body.

============================================
(8)

Solution:

An occurence when both "sharing is useful and how protection can still be maintained" is during multi-threading specifically when using a semaphore. 
A semaphore is used to act as a barrier between a thread and a resource. The semaphore will allow one thread at a time to enter it's critical section 
and use the resource, then when the thread is done the semaphore throws the complete thread out of it's critical section and allows the next thread to access
the resource. 

Before any thread enters the semaphore, the threads communicate with one another using flags to indicate to each other that they both want to access the same resource.
If one flag is up in the first threads and the second is waiting the first thread will yield to the second and the second will enter the semaphore. In this manner they are 
"sharing" the resource by taking turns. The semaphore is used as the "protection."

============================================
(9)

Solution:

Page faults occur when the allocated memory for a given process exceeds the amount of memory provided. In order to resolve such an occurence, the OS must engage in memory re-distribution
expanding the window of memory provided for all processes in the given frame to allow for the page fault to be resolved.

============================================
(10)

Solution:

In order to resolve the issue of the various nodal delays a packet can face when being sent (Propagation, Transmission, Processing, etc.) the fragmentation or the dividing of a single 
packet into multiple must occur. The packet is separated into smaller more consice packets to push the data through the node with greater speed than attempting to push the larger original packet
through in a single operation. This fragmentation can be done on either the client or server side. Equally the re-assembly of the packets is down on the client or server side dependent on which
side is sending / receiving the fragmented packet in question. 

============================================
(11)

Solution:

In any environment that supports multi-threading context switching (moving between threads) is done hundreds if not thousands of times, depending on the number of threads and processes running. 
The thread initially being worked on will (if waiting for a resource) will be placed in either the waiting, blocked or yeild state. The OS will then turn to the next thread it desires to operate
on (which will be in the ready, waiting, blocked or yield state) and begin executing the tasks associated with the second thread. As expressed, this occurs numerous times throughout the course of 
a multi-threaded program against the same thread potentially hundreds of times. 

============================================
(12)

Solution:

The DHCP (Dynamic Host Configuration Protocol) will dynamically allocate an appropraite IP address on the fly to the corresponding procedure. In the event multiple DHCP servers
respond to a single client the first dyamically allocated IP address wins and becomes a piece of the header file of the packet. The remaining DHCP servers that responded are 
ignored in favor of the originally dyamically allocated IP address that was provided. 

============================================
(13)

#include <iostream>

using namespace std;

class Node
{

private:
    int value;

public:
    Node() = default;
    ~Node() = default;

    int getValue()
    {
        return value;
    }
};

/*
    NOTE:

    *THIS SHOULD BE DONE RECURSIVELY*

    The parent (or root) node needs to check it's value (valid values are 0,1,2) and then proceed to check it's children (if there are any).

    Scenarios:

    (1) If the root node has a value of 0 then it should NOT have any children and return false as this structure is not a tree but a single node.

    (2) If the root node has a value of 1 then it should have one child and return false as this structure is not a tree but a linked list.

    (3) If the root node is 2 and the children have values of 0 then return true.

    (4) If the parent node (that is not the root) is 0 then it should have no children and return true. If it has children then return false.

    (5) If the parent node (that is not the root) is 1 then 1 of it's children should not point to nullptr and return true. If both children point to nullptr return false.

    (6) If the parent node (that is not the root) is 2 then both of it's children should not point to nullptr and return true. If either child points to nullptr return false.

*/

class BinarySearchTree
{

private:
public:
    Node data;
    Node *left = nullptr;
    Node *right = nullptr;
    Node *parent = nullptr;

    BinarySearchTree() = default;
    ~BinarySearchTree() = default;

    bool is_valid(Node *root)
    {

        if (root->getValue() == 0 || root->getValue() == 1 || root->getValue() > 2)
        {
            return false;
        }

        if (root->getValue() == 2 && left == nullptr || right == nullptr)
        {
            return true;
        }

        if (parent->getValue() == 0 && left == nullptr || right == nullptr)
        {
            return true;
        }

        if (parent->getValue() == 1 && left == nullptr && right == nullptr)
        {
            return false;
        }

        if (parent->getValue() == 1 && left != nullptr || right != nullptr)
        {
            return true;
        }

        if (parent->getValue() == 2 && left != nullptr && right != nullptr)
        {
            return true;
        }

        return false;
    }
};


============================================
